# This file is automatically generated by r3build.internal.defconv. DO NOT EDIT.

# This is the skeleton of r3build.toml.
# It is structured with a bunch of sections that contain multiple keys and values.

# Values in this file are the default value of corresponding keys.


[log]
# `log` section defines what r3build will output.

# all (bool)
#  - Turn on all event logs.
#  - Notice: it overrides all other log flags.
#
# accepted_events (bool)
#  - Show accepted incoming events by Watcher.
#
# ignored_events (bool)
#  - Show rate-limited / filtered events.
#
# launched_events (bool)
#  - Show launched jobs that got matching events.
#
# job_output (bool)
#  - Show the output of the executed job.
#
# result (bool)
#  - Show if the run was successful or not.
#
# time (bool)
#  - Show job's execution time.

all = false
accepted_events = false
ignored_events = false
launched_events = true
job_output = true
result = true
time = true


[event]
# `event` section defines how r3build handle events.

# rate_limit_duration (float)
#  - Duration for dropping (debouncing) events that occurred so closely (the unit is second).
#
# ignore_events_while_run (bool)
#  - Ignore events occurred while a job is running.
#  - Disabling this flag may result in a never-ending execution loop. Disable with care.

rate_limit_duration = 0.01
ignore_events_while_run = true


[[job]]
# `job` array-of-tables that defines jobs.
#  - What to watch (match and exclude files with glob and regex)
#  - What to execute
#  - How to execute
# ... and etc.

# type (str)  *REQUIRED*
#  - The type of the job.
#  - To see the full list of available types, run `r3build --list-types`.
#  - For type-specific configs, see the following sections.
#
# name (str)
#  - Human-readable name of the job.
#
# when (Union[List[str], str])
#  - One or more types of events to trigger this job.
#  - The job will accept all types of events if it's ommitted.
#  - Available choices are "moved", "deleted", "created", "modified".
#
# path (str)
#  - The root directory to watch.
#  - Any file events (move, delete, create, modify) inside this directory will be reported to r3build recursively.
#
# glob (Union[List[str], str])
#  - One or more glob patterns to match the file path.
#  - The job will be triggered if one or more patterns match to it.
#
# glob_exclude (Union[List[str], str])
#  - One or more glob patterns to exclude. The effect is opposite to `glob`.
#  - The job won't be triggered if one or more patterns match to it.
#
# regex (Union[List[str], str])
#  - One or more regular expression patterns to match the file path.
#  - The job will be triggered if one or more patterns match to it.
#
# regex_exclude (Union[List[str], str])
#  - One or more regular expression patterns to exclude. The effect is opposite to `regex`.
#  - The job won't be triggered if one or more file patterns match to it.

type = ""
name = "noname"
when = ""
path = "."
glob = ""
glob_exclude = ""
regex = ""
regex_exclude = ""


[[job]]  # Properties specific to `make` processor
# `make` type runs a target in a Makefile.

# target (str)
#  - The make target.
#
# environment (Dict[str, str])
#  - Specify additional environment variables.
#  - By default, r3build inherits the parent's envs.
#
# jobs (int)
#  - Number of parallel jobs. Equivalent to `make -j` option.
#  - If it's zero, r3build will decide N of jobs with multiprocessing.cpu_count().
#
# directory (str)
#  - The directory to read Makefile in. Equivalent to `make -C` option.

target = ""
environment = ""
jobs = 0
directory = ""


[[job]]  # Properties specific to `command` processor
# `command` type invokes a command.

# command (str)  *REQUIRED*
#  - The command to run. This command will be executed by `subprocess.run` with `shell=True`.
#
# environment (Dict[str, str])
#  - Specify additional environment variables.
#  - By default, r3build inherits the parent's envs.

command = ""
environment = ""


[[job]]  # Properties specific to `pytest` processor
# `pytest` type runs pytest on a package (directory) or a module (file).

# target (str)  *REQUIRED*
#  - File or directory to run tests.
#  - This string is passed to pytest.main() and also used for reloading Python modules to update test code.
#  - For an advanced use like passing arbitrary arguments to pytest, please use `command` type.

target = ""
